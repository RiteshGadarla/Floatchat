import streamlit as st
from agents.Query import SQLagent
from agents.SummaringAgent import summarizeTable
from agents.Plotting import plotGraphs
import os
import pandas as pd

# === Streamlit Config ===
# st.set_page_config(page_title="🌊 FloatChat - Ocean Data Agent", layout="wide")

st.title("🌊 FloatChat - Ocean Data Exploration")
st.markdown("Query the oceanographic database using natural language and get summaries.")

# === Chat History (session state) ===
if "messages" not in st.session_state:
    st.session_state.messages = []

# Display previous chat messages
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])
        if msg.get("summary"):
            st.subheader("📌 Summary")
            st.write(msg["summary"])
        if msg.get("figures"):
            for fig in msg["figures"]:
                st.pyplot(fig)

# === User Input ===
if user_input := st.chat_input("🔍 Enter your query..."):
    st.session_state.messages.append({"role": "user", "content": user_input})

    with st.chat_message("user"):
        st.markdown(user_input)

    with st.chat_message("assistant"):
        with st.spinner("⏳ Generating SQL and extracting data..."):
            sql_query = SQLagent(user_input)

        if sql_query and sql_query.get("result"):
            st.success("✅ Query executed successfully!")

            sql_query = sql_query.get("sql_query", "")
            st.subheader("📝 Generated SQL Query")
            st.code(sql_query, language="sql")

            # CSV path generated by SQLagent
            project_root = os.path.dirname(os.path.abspath(__file__))
            csv_path = os.path.join(project_root, "dataExtracted.csv")

            if os.path.exists(csv_path):
                df = pd.read_csv(csv_path)
                st.subheader("📊 Extracted Data Preview")
                st.dataframe(df.head(20))

                with open(csv_path, "rb") as f:
                    st.download_button(
                        label="⬇️ Download Extracted CSV",
                        data=f,
                        file_name="dataExtracted.csv",
                        mime="text/csv"
                    )

                # Summarize data
                with st.spinner("📝 Summarizing extracted data..."):
                    summary, visualizations = summarizeTable(csv_path)

                if summary:
                    st.subheader("📌 Summary")
                    st.write(summary)

                # Plot graphs
                figures = plotGraphs(csv_path, visualizations)
                if figures:
                    st.subheader("📊 Visualization")
                    for fig in figures:
                        st.pyplot(fig)
                else:
                    st.warning("No valid plots generated.")

                # Save assistant response in history
                st.session_state.messages.append({
                    "role": "assistant",
                    "content": "Here are your query results:",
                    "summary": summary,
                    "figures": figures
                })
            else:
                st.error("CSV file not found after SQL execution.")
                st.session_state.messages.append({
                    "role": "assistant",
                    "content": "⚠️ CSV file not found after SQL execution."
                })
        else:
            st.error("⚠️ Query failed or returned no results.")
            st.session_state.messages.append({
                "role": "assistant",
                "content": "⚠️ Query failed or returned no results."
            })
